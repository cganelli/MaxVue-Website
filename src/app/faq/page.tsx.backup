// ... existing code ... <imports and function declaration>
          <div className="mb-8">
            <h2 className="text-2xl font-bold text-[#1e1e1e] mb-6">About the App</h2>
          </div>

          <Accordion type="single" collapsible className="space-y-4">
            <AccordionItem value="item-1" className="bg-white rounded-lg border-none shadow-lg">
              <AccordionTrigger className="px-8 py-6 text-left hover:no-underline">
                <span className="text-lg font-semibold text-[#1e1e1e]">1. What is MaxVue?</span>
              </AccordionTrigger>
              <AccordionContent className="px-8 pb-6">
                <p className="text-lg text-gray-700 leading-relaxed">
                  MaxVue is a digital vision support app that helps you see clearly by applying custom visual filters based on your personal prescription. It includes text filtering (like blue-light filtering), visual enhancements, and visual support tools specifically engineered to reduce blur, sharpen text, and improve visual comfort — no special equipment required.
                </p>
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-2" className="bg-white rounded-lg border-none shadow-lg">
              <AccordionTrigger className="px-8 py-6 text-left hover:no-underline">
                <span className="text-lg font-semibold text-[#1e1e1e]">2. How does MaxVue improve my vision?</span>
              </AccordionTrigger>
              <AccordionContent className="px-8 pb-6">
                <p className="text-lg text-gray-700 leading-relaxed">
                  MaxVue applies dynamic screen filters tuned to your eyes. Think of it like adjusting contrast and sharpness — but based on your real prescription. It can stimulate clarity for myopia, hyperopia, astigmatism, and presbyopia.
                </p>
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-3" className="bg-white rounded-lg border-none shadow-lg">
              <AccordionTrigger className="px-8 py-6 text-left hover:no-underline">
                <span className="text-lg font-semibold text-[#1e1e1e]">3. Can this replace a visit to the eye doctor?</span>
              </AccordionTrigger>
              <AccordionContent className="px-8 pb-6">
                <p className="text-lg text-gray-700 leading-relaxed">
                  No. MaxVue is not a substitute for a comprehensive eye exam. It's a tool to help you see more clearly in digital environments — not a medical device or diagnostic tool.
                </p>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
// ... existing code ... <footer section>
